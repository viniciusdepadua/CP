class Bitset:

    def __init__(self, size: int):
        self.val = 0
        self.size = size
        self.max = 2 ** size - 1
        self.counter = 0

    def fix(self, idx: int) -> None:
        idx = self.size - idx - 1
        if (self.val >> idx) & 1 == 0:
            self.val = self.val + (1 << idx)
            self.counter += 1
        

    def unfix(self, idx: int) -> None:
        idx = self.size - idx - 1
        if (self.val >> idx) & 1 == 1:
            self.val = self.val - (1 << idx)
            self.counter -= 1

    def flip(self) -> None:
        self.counter = self.size - self.counter
        self.val = (~self.val) & self.max
        
    def all(self) -> bool:
        return self.val == self.max

    def one(self) -> bool:
        return self.val > 0

    def count(self) -> int:
        return self.counter

    def toString(self) -> str:
        bits = []
        tmp = self.val
        for idx in range(self.size):
            if (self.val >> idx) & 1 == 0:
                bits.append('0')
            else:
                bits.append('1')
        return ''.join(reversed(bits))
        


# Your Bitset object will be instantiated and called as such:
# obj = Bitset(size)
# obj.fix(idx)
# obj.unfix(idx)
# obj.flip()
# param_4 = obj.all()
# param_5 = obj.one()
# param_6 = obj.count()
# param_7 = obj.toString()